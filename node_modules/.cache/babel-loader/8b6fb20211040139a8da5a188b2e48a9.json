{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Archive\\\\src\\\\Pages\\\\QuestionPage\\\\QuestionPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Question from \"../../Components/Post/Question\";\nimport api from '../../posts';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionPage = () => {\n  _s();\n\n  const [listQuestions, setlistQuestions] = useState(null);\n  const [comReplay, setComReplay] = useState(\"\");\n  const [current_id, setCurrent_id] = useState(null);\n  const [objcom, setObjcom] = useState({});\n  useEffect(() => {\n    fetch('http://localhost:5000/posts').then(res => {\n      return res.json();\n    }).then(data => {\n      setlistQuestions(data);\n    });\n  }, []);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const id = listQuestions.length ? listQuestions[listQuestions.length - 1].id + 1 : 1;\n    ;\n    const newCom = {\n      id,\n      comments: comReplay\n    };\n\n    try {\n      const response = await api.post('/posts/comments', newCom);\n      const allPosts = [...listQuestions, response.data];\n      setlistQuestions(allPosts);\n      setComReplay('');\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        width: '100%',\n        maxWidth: 360,\n        bgcolor: 'background.paper'\n      },\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        alignItems: \"flex-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Question, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), listQuestions && listQuestions.map(users => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\" \", users.id && users.body, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 13\n            }, this), users.comments && users.comments.map(com => /*#__PURE__*/_jsxDEV(\"p\", {\n              children: com.comment && setObjcom({ ...objcom,\n                comment: {\n                  com_id: com.com_id,\n                  user_id: com.user_id,\n                  comment: com.comment\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"newPostForm\",\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"postBody\",\n                children: \"Comment:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                id: \"postBody\",\n                required: true,\n                onChange: e => {\n                  setComReplay(e.target.value);\n                  setCurrent_id(users.id);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(QuestionPage, \"7KsxZdSaLyTaaV81ku8hi9DY19I=\");\n\n_c = QuestionPage;\nexport default QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Archive/src/Pages/QuestionPage/QuestionPage.jsx"],"names":["React","useEffect","useState","Question","api","Typography","List","ListItem","QuestionPage","listQuestions","setlistQuestions","comReplay","setComReplay","current_id","setCurrent_id","objcom","setObjcom","fetch","then","res","json","data","handleSubmit","e","preventDefault","id","length","newCom","comments","response","post","allPosts","err","console","log","message","width","maxWidth","bgcolor","map","users","body","com","comment","com_id","user_id","target","value"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from \"react\";\nimport Question from \"../../Components/Post/Question\";\nimport api from '../../posts';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\n\nconst QuestionPage = () => { \n\n    const [listQuestions,setlistQuestions] = useState(null);\n    const [comReplay,setComReplay] = useState(\"\");\n    const [current_id,setCurrent_id] = useState(null);\n    const [objcom, setObjcom] = useState({});\n\n  useEffect(() => {\n      fetch('http://localhost:5000/posts')\n       .then(res => {\n           return res.json();\n\n      })\n       .then(data => {\n           setlistQuestions(data);\n\n       })\n   },[])\n\n   const handleSubmit = async (e) => {\n    e.preventDefault();\n    const id = listQuestions.length ? listQuestions[listQuestions.length - 1].id + 1 : 1;;\n    const newCom = { id, comments: comReplay };\n    try {\n      const response = await api.post('/posts/comments', newCom);\n   \n      const allPosts = [...listQuestions, response.data];\n   \n      setlistQuestions(allPosts);\n      setComReplay('');\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }\n  \n    return(\n\n        <>\n        <List  sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }} >\n            <ListItem alignItems=\"flex-start\" >\n        <div>\n            <Question/>\n            { listQuestions && listQuestions.map((users) => (\n            <div>\n            <h2> { users.id && users.body } </h2>\n            {users.comments && users.comments.map((com) => (\n                <p>{com.comment &&  setObjcom({...objcom,  comment: {\n                    com_id: com.com_id, user_id: com.user_id, comment: com.comment\n                       \n                    },\n               })}</p> ))}\n\n        <form className=\"newPostForm\" onSubmit={handleSubmit}>\n                \n                <label htmlFor=\"postBody\">Comment:</label>\n                <Typography\n                    id=\"postBody\"\n                    required\n                    onChange={(e) => { setComReplay(e.target.value); setCurrent_id(users.id) }}\n                />\n                <button type=\"submit\">Submit</button>\n            </form>\n</div>\n            )) }\n        </div>\n        </ListItem>\n        </List>\n\n\n        </>\n\n    )\n\n}\n\n\n\n\n\n\nexport default QuestionPage;"]},"metadata":{},"sourceType":"module"}