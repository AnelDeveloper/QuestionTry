{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport api from \"../../posts\";\nimport { format } from \"date-fns\";\nimport { Button, Comment, Form } from \"semantic-ui-react\";\nimport { Divider, Avatar, Grid, Paper } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { addQuestion } from \"../../store/AskQuestion/actions\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Question = _ref => {\n  _s();\n\n  let {\n    postId,\n    body\n  } = _ref;\n  const [post, setPosts] = useState(\"\");\n  const [postBody, setPostBody] = useState(\"\");\n  const {\n    posts,\n    loading\n  } = useSelector(store => store.post);\n  const dispatch = useDispatch();\n\n  const onQuestion = () => {\n    console.log(onQuestion);\n    dispatch(addQuestion({\n      body: [...body, post],\n      postId\n    }));\n  }; //const handleSubmit = async (e) => {\n  // e.preventDefault();\n  //const id = posts.length ? posts[posts.length - 1].id + 1 : 1;\n  //const datetime = format(new Date(), \"MMMM dd, yyyy pp\");\n  //const newPost = { id, datetime, body: postBody, comments: null };\n  //console.log(id + \"  \" + datetime + \"  \" + JSON.stringify(newPost));\n  //try {\n  //const response = await api.post(\"/posts\", newPost);\n  //console.log(response);\n  //const allPosts = [...posts, response.data];\n  //console.log(allPosts);\n  //setPostBody(\"\");\n  //} catch (err) {\n  //console.log(`Error: ${err.message}`);\n  //}\n  //};\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Question, \"2rV/CUO5xW5AQdlPPzSkcINBjns=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Archive/src/Components/Post/Question.jsx"],"names":["React","useState","useEffect","TextField","api","format","Button","Comment","Form","Divider","Avatar","Grid","Paper","useSelector","useDispatch","addQuestion","Question","postId","body","post","setPosts","postBody","setPostBody","posts","loading","store","dispatch","onQuestion","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,IAA1B,QAAsC,mBAAtC;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,KAAhC,QAA6C,mBAA7C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA6B,iCAA7B;;;;AAEA,MAAMC,QAAQ,GAAG,QAAsB;AAAA;;AAAA,MAArB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAqB;AACrC,QAAM,CAACC,IAAD,EAAOC,QAAP,IAAmBnB,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAAEsB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAqBX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACN,IAAlB,CAAtC;AAEA,QAAMO,QAAQ,GAAGZ,WAAW,EAA5B;;AAIA,QAAMa,UAAU,GAAG,MAAM;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAD,IAAAA,QAAQ,CAACX,WAAW,CAAC;AAAEG,MAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ,EAAUC,IAAV,CAAR;AAAyBF,MAAAA;AAAzB,KAAD,CAAZ,CAAR;AACD,GAHD,CAVqC,CAiBrC;AACE;AACC;AACA;AACA;AACA;AACA;AACC;AACC;AACA;AACA;AACA;AACF;AACE;AACF;AACH;;;AAEA,sBACE,qCADF;AAqGD,CAvID;;GAAMD,Q;UAIuBH,W,EAEVC,W;;;KANbE,Q;AAyIN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport api from \"../../posts\";\nimport { format } from \"date-fns\";\nimport { Button, Comment, Form } from \"semantic-ui-react\";\nimport { Divider, Avatar, Grid, Paper } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { addQuestion  } from \"../../store/AskQuestion/actions\";\n\nconst Question = ({ postId, body }) => {\n  const [post, setPosts] = useState(\"\");\n  const [postBody, setPostBody] = useState(\"\");\n\n  const { posts, loading } = useSelector((store) => store.post);\n\n  const dispatch = useDispatch();\n\n\n\n  const onQuestion = () => {\n    console.log(onQuestion);\n    dispatch(addQuestion({ body: [...body, post], postId }));\n  };\n\n\n\n  //const handleSubmit = async (e) => {\n    // e.preventDefault();\n     //const id = posts.length ? posts[posts.length - 1].id + 1 : 1;\n     //const datetime = format(new Date(), \"MMMM dd, yyyy pp\");\n     //const newPost = { id, datetime, body: postBody, comments: null };\n     //console.log(id + \"  \" + datetime + \"  \" + JSON.stringify(newPost));\n     //try {\n      //const response = await api.post(\"/posts\", newPost);\n       //console.log(response);\n       //const allPosts = [...posts, response.data];\n       //console.log(allPosts);\n       //setPostBody(\"\");\n     //} catch (err) {\n       //console.log(`Error: ${err.message}`);\n     //}\n  //};\n\n  return (\n    <>\n      \n\n        {/* { users && users.map((users) => (\n            <div> <h2> { users.id && users.question } </h2>\n\n\n\n\n\n\n\n            \n       <div className=\"List-All-Comments-and-questions\">\n        <form className=\"newPostForm\" onSubmit={handleSubmit}>\n          <label htmlFor=\"postBody\">Post:</label>\n          <textarea\n            id=\"postBody\"\n            required\n            value={postBody}\n            onChange={(e) => setPostBody(e.target.value)}\n            onClick={onQuestion}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<Paper style={{ padding: \"40px 20px\" }}>\n        <Grid container wrap=\"nowrap\" spacing={2}>\n          <Grid item>\n            <Avatar alt=\"Remy Sharp\"  />\n          </Grid>\n          <Grid justifyContent=\"left\" item xs zeroMinWidth>\n            <h4 style={{ margin: 0, textAlign: \"left\" }}>{users.id && users.first_name }</h4>\n            <p style={{ textAlign: \"left\" }}>\n              {users.comment}\n            </p>\n            <p style={{ textAlign: \"left\", color: \"gray\" }}>\n              {users.time}\n            </p>\n          </Grid>\n          \n        </Grid>\n        <Form reply>\n          <Form.TextArea />\n          <Button\n            content='Add Reply'\n            labelPosition='left'\n            icon='edit'\n            primary\n          />\n        </Form>\n        <h2> { users.id && users.question } </h2>\n        <Divider variant=\"fullWidth\" style={{ margin: \"30px 0\" }} />\n        <Grid container wrap=\"nowrap\" spacing={2}>\n          <Grid item>\n            <Avatar alt=\"Remy Sharp\" />\n          </Grid>\n          <Grid justifyContent=\"left\" item xs zeroMinWidth>\n            <h4 style={{ margin: 0, textAlign: \"left\" }}>Michel Michel</h4>\n            <p style={{ textAlign: \"left\" }}>\n            </p>\n            <p style={{ textAlign: \"left\", color: \"gray\" }}>\n]            </p>\n          </Grid>\n        </Grid>\n        <Form reply>\n          <Form.TextArea />\n          <Button\n            content='Add Reply'\n            labelPosition='left'\n            icon='edit'\n            primary\n          />\n        </Form>\n      </Paper>\n</div>\n            ))} */}\n    </>\n  );\n};\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}