{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Archive\\\\src\\\\Components\\\\Post\\\\Question.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport api from \"../../posts\";\nimport { format } from \"date-fns\";\nimport { Button, Comment, Form } from \"semantic-ui-react\";\nimport { Divider, Avatar, Grid, Paper } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Question = () => {\n  _s();\n\n  const [postTitle, setPostTitle] = useState(\"\");\n  const [postBody, setPostBody] = useState(\"\");\n  const {\n    posts,\n    loading\n  } = useSelector(store => store.post);\n\n  const handleSubmit = async e => {// e.preventDefault();\n    // const id = posts.length ? posts[posts.length - 1].id + 1 : 1;\n    // const datetime = format(new Date(), \"MMMM dd, yyyy pp\");\n    // const newPost = { id, datetime, body: postBody, comments: null };\n    // console.log(id + \"  \" + datetime + \"  \" + JSON.stringify(newPost));\n    // try {\n    //   const response = await api.post(\"/posts\", newPost);\n    //   console.log(response);\n    //   const allPosts = [...posts, response.data];\n    //   console.log(allPosts);\n    //   setPosts(allPosts);\n    //   setPostBody(\"\");\n    // } catch (err) {\n    //   console.log(`Error: ${err.message}`);\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"List-All-Comments-and-questions\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"newPostForm\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postBody\",\n          children: \"Post:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"postBody\",\n          required: true,\n          value: postBody,\n          onChange: e => setPostBody(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Question, \"/v8xqHnF3RnjJL3Xw9uJxABobC0=\", false, function () {\n  return [useSelector];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Archive/src/Components/Post/Question.jsx"],"names":["React","useState","useEffect","TextField","api","format","Button","Comment","Form","Divider","Avatar","Grid","Paper","useSelector","Question","postTitle","setPostTitle","postBody","setPostBody","posts","loading","store","post","handleSubmit","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,IAA1B,QAAsC,mBAAtC;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,KAAhC,QAA6C,mBAA7C;AACA,SAASC,WAAT,QAA4B,aAA5B;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAAEkB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAqBP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAtC;;AAEA,QAAMC,YAAY,GAAG,MAAOC,CAAP,IAAa,CAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAhBD;;AAkBA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA,6BACE;AAAM,QAAA,SAAS,EAAC,aAAhB;AAA8B,QAAA,QAAQ,EAAED,YAAxC;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,EAAE,EAAC,UADL;AAEE,UAAA,QAAQ,MAFV;AAGE,UAAA,KAAK,EAAEN,QAHT;AAIE,UAAA,QAAQ,EAAGO,CAAD,IAAON,WAAW,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ9B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAQE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAsED,CA9FD;;GAAMZ,Q;UAIuBD,W;;;KAJvBC,Q;AAgGN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport api from \"../../posts\";\nimport { format } from \"date-fns\";\nimport { Button, Comment, Form } from \"semantic-ui-react\";\nimport { Divider, Avatar, Grid, Paper } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\n\nconst Question = () => {\n  const [postTitle, setPostTitle] = useState(\"\");\n  const [postBody, setPostBody] = useState(\"\");\n\n  const { posts, loading } = useSelector((store) => store.post);\n\n  const handleSubmit = async (e) => {\n    // e.preventDefault();\n    // const id = posts.length ? posts[posts.length - 1].id + 1 : 1;\n    // const datetime = format(new Date(), \"MMMM dd, yyyy pp\");\n    // const newPost = { id, datetime, body: postBody, comments: null };\n    // console.log(id + \"  \" + datetime + \"  \" + JSON.stringify(newPost));\n    // try {\n    //   const response = await api.post(\"/posts\", newPost);\n    //   console.log(response);\n    //   const allPosts = [...posts, response.data];\n    //   console.log(allPosts);\n    //   setPosts(allPosts);\n    //   setPostBody(\"\");\n    // } catch (err) {\n    //   console.log(`Error: ${err.message}`);\n    // }\n  };\n\n  return (\n    <>\n      <div className=\"List-All-Comments-and-questions\">\n        <form className=\"newPostForm\" onSubmit={handleSubmit}>\n          <label htmlFor=\"postBody\">Post:</label>\n          <textarea\n            id=\"postBody\"\n            required\n            value={postBody}\n            onChange={(e) => setPostBody(e.target.value)}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        {/* { users && users.map((users) => (\n            <div> <h2> { users.id && users.question } </h2>\n\n<Paper style={{ padding: \"40px 20px\" }}>\n        <Grid container wrap=\"nowrap\" spacing={2}>\n          <Grid item>\n            <Avatar alt=\"Remy Sharp\"  />\n          </Grid>\n          <Grid justifyContent=\"left\" item xs zeroMinWidth>\n            <h4 style={{ margin: 0, textAlign: \"left\" }}>{users.id && users.first_name }</h4>\n            <p style={{ textAlign: \"left\" }}>\n              {users.comment}\n            </p>\n            <p style={{ textAlign: \"left\", color: \"gray\" }}>\n              {users.time}\n            </p>\n          </Grid>\n          \n        </Grid>\n        <Form reply>\n          <Form.TextArea />\n          <Button\n            content='Add Reply'\n            labelPosition='left'\n            icon='edit'\n            primary\n          />\n        </Form>\n        <h2> { users.id && users.question } </h2>\n        <Divider variant=\"fullWidth\" style={{ margin: \"30px 0\" }} />\n        <Grid container wrap=\"nowrap\" spacing={2}>\n          <Grid item>\n            <Avatar alt=\"Remy Sharp\" />\n          </Grid>\n          <Grid justifyContent=\"left\" item xs zeroMinWidth>\n            <h4 style={{ margin: 0, textAlign: \"left\" }}>Michel Michel</h4>\n            <p style={{ textAlign: \"left\" }}>\n            </p>\n            <p style={{ textAlign: \"left\", color: \"gray\" }}>\n]            </p>\n          </Grid>\n        </Grid>\n        <Form reply>\n          <Form.TextArea />\n          <Button\n            content='Add Reply'\n            labelPosition='left'\n            icon='edit'\n            primary\n          />\n        </Form>\n      </Paper>\n</div>\n            ))} */}\n      </div>\n    </>\n  );\n};\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}