{"ast":null,"code":"import { fetchPosts, addComment } from \"./actions\";\nexport const extraReducers = builder => {\n  builder.addCase(fetchPosts.pending, (state, action) => {\n    state.loading = true;\n  }).addCase(fetchPosts.fulfilled, (state, action) => {\n    state.loading = false;\n    state.posts = action.payload;\n  }).addCase(fetchPosts.rejected, (state, action) => {\n    state.loading = false;\n    state.errror = true;\n  }).addCase(addComment.fulfilled, (state, action) => {\n    state.loading = false;\n    const index = state.posts.findIndex(post => post.id === action.payload.id);\n    state.posts[index] = action.payload;\n  });\n};","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Archive/src/store/post/extraReducers.js"],"names":["fetchPosts","addComment","extraReducers","builder","addCase","pending","state","action","loading","fulfilled","posts","payload","rejected","errror","index","findIndex","post","id"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,WAAvC;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACxCA,EAAAA,OAAO,CACJC,OADH,CACWJ,UAAU,CAACK,OADtB,EAC+B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,IAAAA,KAAK,CAACE,OAAN,GAAgB,IAAhB;AACD,GAHH,EAIGJ,OAJH,CAIWJ,UAAU,CAACS,SAJtB,EAIiC,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAChDD,IAAAA,KAAK,CAACE,OAAN,GAAgB,KAAhB;AACAF,IAAAA,KAAK,CAACI,KAAN,GAAcH,MAAM,CAACI,OAArB;AACD,GAPH,EAQGP,OARH,CAQWJ,UAAU,CAACY,QARtB,EAQgC,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC/CD,IAAAA,KAAK,CAACE,OAAN,GAAgB,KAAhB;AACAF,IAAAA,KAAK,CAACO,MAAN,GAAe,IAAf;AACD,GAXH,EAYGT,OAZH,CAYWH,UAAU,CAACQ,SAZtB,EAYiC,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAChDD,IAAAA,KAAK,CAACE,OAAN,GAAgB,KAAhB;AAEA,UAAMM,KAAK,GAAGR,KAAK,CAACI,KAAN,CAAYK,SAAZ,CACXC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYV,MAAM,CAACI,OAAP,CAAeM,EADzB,CAAd;AAIAX,IAAAA,KAAK,CAACI,KAAN,CAAYI,KAAZ,IAAqBP,MAAM,CAACI,OAA5B;AACD,GApBH;AAqBD,CAtBM","sourcesContent":["import { fetchPosts, addComment } from \"./actions\";\n\nexport const extraReducers = (builder) => {\n  builder\n    .addCase(fetchPosts.pending, (state, action) => {\n      state.loading = true;\n    })\n    .addCase(fetchPosts.fulfilled, (state, action) => {\n      state.loading = false;\n      state.posts = action.payload;\n    })\n    .addCase(fetchPosts.rejected, (state, action) => {\n      state.loading = false;\n      state.errror = true;\n    })\n    .addCase(addComment.fulfilled, (state, action) => {\n      state.loading = false;\n\n      const index = state.posts.findIndex(\n        (post) => post.id === action.payload.id\n      );\n\n      state.posts[index] = action.payload;\n    });\n};\n"]},"metadata":{},"sourceType":"module"}